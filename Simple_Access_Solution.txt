================================================
SIMPLE VB6 SOLUTION WITH ACCESS DATABASE
================================================

This is a much simpler approach that avoids MySQL ODBC complications.

================================================
STEP 1: CREATE ACCESS DATABASE
================================================
1. Open Microsoft Access
2. Create a new database called "MasterData.mdb"
3. Create these tables:

Table: StateM
- StateID (AutoNumber, Primary Key)
- StateName (Text, 50)
- ShortCode (Text, 5)
- IsActive (Yes/No)

Table: UserM
- UserID (AutoNumber, Primary Key)
- UserName (Text, 25)
- Password (Text, 15)

Add sample data:
UserM: UserName="admin", Password="admin123"
StateM: StateName="Test State", ShortCode="TS", IsActive=True

================================================
STEP 2: VB6 PROJECT SETUP
================================================
1. Open VB6
2. File → New Project → Standard EXE
3. Project → References → Microsoft DAO 3.6 Object Library (check this)

================================================
STEP 3: SIMPLE MODULE CODE
================================================
Add a module with this code:

Attribute VB_Name = "modSimple"
Option Explicit

Public db As Database
Public rs As Recordset

Public Function OpenDatabase() As Boolean
    On Error GoTo ErrorHandler
    
    ' Open Access database (change path as needed)
    Set db = DBEngine.Workspaces(0).OpenDatabase(App.Path & "\MasterData.mdb")
    OpenDatabase = True
    Exit Function
    
ErrorHandler:
    MsgBox "Database error: " & Err.Description, vbCritical
    OpenDatabase = False
End Function

Public Function ValidateUser(userName As String, password As String) As Boolean
    On Error GoTo ErrorHandler
    
    Set rs = db.OpenRecordset("SELECT * FROM UserM WHERE UserName='" & userName & "' AND Password='" & password & "'")
    
    If Not rs.EOF Then
        ValidateUser = True
    Else
        ValidateUser = False
    End If
    
    rs.Close
    Set rs = Nothing
    Exit Function
    
ErrorHandler:
    ValidateUser = False
End Function

Public Sub CloseDB()
    On Error Resume Next
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    If Not db Is Nothing Then
        db.Close
        Set db = Nothing
    End If
End Sub

================================================
STEP 4: FORM1 CODE (LOGIN)
================================================
Replace Form1 code with:

Private Sub Form_Load()
    Me.Caption = "Simple Login"
    
    ' Create controls
    Dim txtUser As TextBox
    Dim txtPass As TextBox
    Dim cmdLogin As CommandButton
    
    Set txtUser = Me.Controls.Add("VB.TextBox", "txtUser")
    txtUser.Left = 1000
    txtUser.Top = 500
    txtUser.Width = 2000
    txtUser.Text = "admin"
    txtUser.Visible = True
    
    Set txtPass = Me.Controls.Add("VB.TextBox", "txtPass")
    txtPass.Left = 1000
    txtPass.Top = 1000
    txtPass.Width = 2000
    txtPass.PasswordChar = "*"
    txtPass.Text = "admin123"
    txtPass.Visible = True
    
    Set cmdLogin = Me.Controls.Add("VB.CommandButton", "cmdLogin")
    cmdLogin.Caption = "Login"
    cmdLogin.Left = 1000
    cmdLogin.Top = 1500
    cmdLogin.Width = 1000
    cmdLogin.Visible = True
    
    ' Open database
    If Not OpenDatabase() Then
        MsgBox "Cannot open database!", vbCritical
        End
    End If
End Sub

Private Sub cmdLogin_Click()
    Dim txtUser As TextBox
    Dim txtPass As TextBox
    
    Set txtUser = Me.Controls("txtUser")
    Set txtPass = Me.Controls("txtPass")
    
    If ValidateUser(txtUser.Text, txtPass.Text) Then
        MsgBox "Login OK!", vbInformation
        Load Form2
        Form2.Show
        Me.Hide
    Else
        MsgBox "Login failed!", vbExclamation
    End If
End Sub

Private Sub Form_Unload(Cancel As Integer)
    CloseDB
End Sub

================================================
STEP 5: FORM2 CODE (STATE MASTER)
================================================
Add Form2 with this code:

Private Sub Form_Load()
    Me.Caption = "State Master - Simple"
    
    ' Create controls
    Dim txtID As TextBox
    Dim txtName As TextBox
    Dim txtCode As TextBox
    Dim chkActive As CheckBox
    Dim cmdSave As CommandButton
    Dim cmdNew As CommandButton
    Dim lstStates As ListBox
    
    ' ID field
    Set txtID = Me.Controls.Add("VB.TextBox", "txtID")
    txtID.Left = 1000
    txtID.Top = 200
    txtID.Width = 1000
    txtID.Locked = True
    txtID.BackColor = &H8000000F
    txtID.Visible = True
    
    ' Name field
    Set txtName = Me.Controls.Add("VB.TextBox", "txtName")
    txtName.Left = 1000
    txtName.Top = 600
    txtName.Width = 2000
    txtName.Visible = True
    
    ' Code field
    Set txtCode = Me.Controls.Add("VB.TextBox", "txtCode")
    txtCode.Left = 1000
    txtCode.Top = 1000
    txtCode.Width = 1000
    txtCode.Visible = True
    
    ' Active checkbox
    Set chkActive = Me.Controls.Add("VB.CheckBox", "chkActive")
    chkActive.Caption = "Active"
    chkActive.Left = 1000
    chkActive.Top = 1400
    chkActive.Value = 1
    chkActive.Visible = True
    
    ' Save button
    Set cmdSave = Me.Controls.Add("VB.CommandButton", "cmdSave")
    cmdSave.Caption = "Save"
    cmdSave.Left = 1000
    cmdSave.Top = 1800
    cmdSave.Width = 1000
    cmdSave.Visible = True
    
    ' New button
    Set cmdNew = Me.Controls.Add("VB.CommandButton", "cmdNew")
    cmdNew.Caption = "New"
    cmdNew.Left = 2100
    cmdNew.Top = 1800
    cmdNew.Width = 1000
    cmdNew.Visible = True
    
    ' List box
    Set lstStates = Me.Controls.Add("VB.ListBox", "lstStates")
    lstStates.Left = 200
    lstStates.Top = 2300
    lstStates.Width = 4000
    lstStates.Height = 1500
    lstStates.Visible = True
    
    LoadStates
End Sub

Private Sub LoadStates()
    Dim lstStates As ListBox
    Set lstStates = Me.Controls("lstStates")
    lstStates.Clear
    
    Set rs = db.OpenRecordset("SELECT * FROM StateM ORDER BY StateName")
    
    Do While Not rs.EOF
        lstStates.AddItem rs("StateID") & " - " & rs("StateName") & " (" & rs("ShortCode") & ")"
        rs.MoveNext
    Loop
    
    rs.Close
    Set rs = Nothing
End Sub

Private Sub cmdSave_Click()
    Dim txtID As TextBox
    Dim txtName As TextBox
    Dim txtCode As TextBox
    Dim chkActive As CheckBox
    
    Set txtID = Me.Controls("txtID")
    Set txtName = Me.Controls("txtName")
    Set txtCode = Me.Controls("txtCode")
    Set chkActive = Me.Controls("chkActive")
    
    If Trim(txtName.Text) = "" Then
        MsgBox "Enter state name!", vbExclamation
        Exit Sub
    End If
    
    If txtID.Text = "" Then
        ' Add new
        Set rs = db.OpenRecordset("StateM", dbOpenDynaset)
        rs.AddNew
        rs("StateName") = txtName.Text
        rs("ShortCode") = txtCode.Text
        rs("IsActive") = chkActive.Value
        rs.Update
        rs.Close
        Set rs = Nothing
        
        MsgBox "State added!", vbInformation
    Else
        ' Update existing
        Set rs = db.OpenRecordset("SELECT * FROM StateM WHERE StateID=" & txtID.Text)
        If Not rs.EOF Then
            rs.Edit
            rs("StateName") = txtName.Text
            rs("ShortCode") = txtCode.Text
            rs("IsActive") = chkActive.Value
            rs.Update
        End If
        rs.Close
        Set rs = Nothing
        
        MsgBox "State updated!", vbInformation
    End If
    
    LoadStates
    ClearForm
End Sub

Private Sub cmdNew_Click()
    ClearForm
End Sub

Private Sub ClearForm()
    Dim txtID As TextBox
    Dim txtName As TextBox
    Dim txtCode As TextBox
    Dim chkActive As CheckBox
    
    Set txtID = Me.Controls("txtID")
    Set txtName = Me.Controls("txtName")
    Set txtCode = Me.Controls("txtCode")
    Set chkActive = Me.Controls("chkActive")
    
    txtID.Text = ""
    txtName.Text = ""
    txtCode.Text = ""
    chkActive.Value = 1
End Sub

================================================
ADVANTAGES OF THIS APPROACH:
================================================

✅ No MySQL ODBC driver needed
✅ No complex connection strings
✅ Uses built-in VB6 DAO (Data Access Objects)
✅ Access database is simple to create
✅ No "Load 0" errors - controls created programmatically
✅ Easy to extend with more forms
✅ Works on any Windows machine with VB6

================================================
TO EXTEND THIS SOLUTION:
================================================

1. Add more tables to the Access database
2. Create more forms following the same pattern
3. Add relationships between tables
4. Add more validation as needed

This approach is much simpler and will definitely work!